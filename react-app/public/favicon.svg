<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 490 490" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><script xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;

          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);

            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()</script>
<g xmlns="http://www.w3.org/2000/svg">
	<path style="" d="M490,245c0,84.68-42.96,159.33-108.28,203.34c-15.27,10.28-31.76,18.89-49.2,25.57   C305.34,484.3,275.84,490,245,490c-35.84,0-69.89-7.7-100.57-21.52c-16.6-7.49-32.23-16.77-46.62-27.6C38.41,396.17,0,325.07,0,245   c0-25.17,3.79-49.45,10.84-72.3C41.69,72.68,134.86,0,245,0s203.31,72.68,234.16,172.7C486.21,195.55,490,219.83,490,245z" fill="#2191aa" data-original="#55d485" class=""/>
	<ellipse style="" cx="367.161" cy="269.136" rx="63.268" ry="26.063" fill="#456657" data-original="#10995b" class=""/>
	<path style="" d="M457.58,304.57c-0.929,4.936-3.128,9.525-6.64,13.14c-3.421,3.521-7.694,6.109-12.133,8.141   c-9.974,4.566-20.923,6.852-31.696,8.611c-11.24,1.835-22.595,2.954-33.946,3.831c-11.43,0.883-22.872,1.603-34.322,2.178   c-22.853,1.148-45.72,1.941-68.568,3.221c-22.573,1.265-45.196,2.823-67.538,6.413c-10.727,1.724-21.521,3.855-31.71,7.717   c-4.58,1.736-9.749,3.842-13.182,7.469c-1.259,1.33-1.673,2.356-1.224,4.142c0.542,2.156,1.678,4.169,2.864,6.029   c2.875,4.507,6.557,8.494,10.356,12.232c1.078,1.061,2.176,2.098,3.289,3.122c0.617,0.568,0.949,0.711,1.732,1.045   c4.621,1.973,9.778,2.723,14.729,3.356c5.453,0.697,10.94,1.105,16.428,1.415c9.709,0.547,19.441,0.727,29.16,1.007   c21.86,0.631,43.775,1.413,65.405,4.859c20.765,3.308,41.832,9.414,59.024,21.931c8.46,6.159,15.839,13.807,21.379,22.704   c0.155,0.25,0.308,0.501,0.46,0.752c0.284,0.471,0.278,0.266-0.03,0.658c-0.315,0.401-1.074,0.717-1.512,1.007   c-1.163,0.768-2.333,1.526-3.508,2.274c-2.201,1.4-4.424,2.765-6.668,4.095c-4.5,2.666-9.085,5.187-13.746,7.56   c-4.79,2.438-9.659,4.718-14.599,6.836c-2.367,1.014-4.749,1.991-7.147,2.931c-0.456,0.179-1.487,0.761-1.785,0.504   c-0.357-0.308-0.602-1.325-0.833-1.76c-0.588-1.11-1.26-2.181-2.009-3.19c-5.946-8.013-15.834-12.829-24.903-16.352   c-10.201-3.963-20.859-6.607-31.579-8.723c-11.082-2.187-22.256-3.816-33.458-5.241c-11.014-1.401-22.044-2.677-33.049-4.151   c-10.784-1.444-21.628-3.048-32.108-6.046c-8.706-2.49-17.35-6.12-23.905-12.542c-1.616-1.583-3.096-3.339-4.57-5.052   c-3.508-4.074-6.829-8.325-9.769-12.83c-5.361-8.214-9.667-17.615-9.86-27.582c-0.208-10.758,4.874-20.559,13.182-27.246   c8.257-6.646,18.678-10.252,28.862-12.702c10.677-2.569,21.63-4.03,32.552-5.068c22.483-2.136,45.15-2.484,67.719-2.699   c22.883-0.219,45.766-0.114,68.648-0.485c22.6-0.366,45.353-0.941,67.757-4.175c5.495-0.793,10.976-1.768,16.357-3.144   c5.014-1.282,10.132-2.84,14.582-5.548c1.909-1.162,3.857-2.588,4.935-4.599c1.01-1.885,1.497-4.357,1.199-6.475   c-0.658-4.686-5.23-7.887-9.035-10.038c-4.513-2.552-9.459-4.287-14.435-5.685c-0.427-0.12-5.903-1.797-6.084-1.396   c0-0.787,0.345-1.699,0.507-2.462c0.378-1.778,0.761-3.555,1.145-5.331c0.377-1.74,0.755-3.479,1.141-5.218   c0.028-0.128,0.446-2.419,0.557-2.419c0.015,0.326,4.416,1.143,4.822,1.246c4.745,1.198,9.432,2.707,13.93,4.639   c8.251,3.544,16.441,8.776,20.666,16.989C457.966,293.413,458.674,299.123,457.58,304.57z" fill="#456657" data-original="#10995b" class=""/>
	<path style="" d="M479.16,172.7H10.84C41.69,72.68,134.86,0,245,0S448.31,72.68,479.16,172.7z" fill="#c7f0ff" data-original="#bce6f5" class=""/>
	<g>
		<path style="" d="M235.31,311.07l-90.88,157.41c-16.6-7.49-32.23-16.77-46.62-27.6L22.87,311.07    C-6.44,260.3,5.19,201.66,40.82,164.48c21.76-22.7,52.47-37.39,88.27-37.39C223.51,127.09,282.52,229.3,235.31,311.07z" fill="#07f38d" data-original="#f75454" class=""/>
		<path style="" d="M192.986,249.739c0,30.093-20.804,55.322-48.812,62.102c-4.837,1.184-9.894,1.801-15.091,1.801    c-35.277,0-63.891-28.613-63.891-63.903c0-35.278,28.613-63.891,63.891-63.891c5.198,0,10.254,0.618,15.091,1.801    C172.183,194.43,192.986,219.659,192.986,249.739z" fill="#c7f0ff" data-original="#bce6f5" class=""/>
		<path style="" d="M192.986,249.739c0,30.093-20.804,55.322-48.812,62.102c-28.008-6.78-48.799-32.01-48.799-62.102    c0-30.08,20.791-55.309,48.799-62.089C172.183,194.43,192.986,219.659,192.986,249.739z" fill="#ffffff" data-original="#ffffff"/>
	</g>
	<g>
		<path style="" d="M367.161,269.136l77.693-134.568c34.53-59.808-8.632-134.567-77.693-134.567h0    c-69.06,0-112.223,74.76-77.693,134.567L367.161,269.136z" fill="#07f38d" data-original="#f75454" class=""/>
		<path style="" d="M413.897,89.709c0,22.011-15.216,40.464-35.702,45.423c-3.538,0.866-7.236,1.317-11.038,1.317    c-25.803,0-46.731-20.928-46.731-46.741c0-25.803,20.928-46.731,46.731-46.731c3.802,0,7.5,0.452,11.038,1.317    C398.681,49.254,413.897,67.708,413.897,89.709z" fill="#c7f0ff" data-original="#bce6f5" class=""/>
		<path style="" d="M413.897,89.709c0,22.011-15.216,40.464-35.702,45.423c-20.486-4.959-35.693-23.413-35.693-45.423    c0-22.001,15.207-40.455,35.693-45.414C398.681,49.254,413.897,67.708,413.897,89.709z" fill="#ffffff" data-original="#ffffff"/>
	</g>
</g>















</g></svg>
